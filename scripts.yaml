xfinity_left:
  alias: '[Not Working] Rachel Maddow Show'
  sequence:
  - service: remote.send_command
    target:
      device_id: e25a5843dcd6df5832a249f48c90e1f9
    data:
      device: Xfinity
      command: Exit
  - delay:
      hours: 0
      minutes: 0
      seconds: 3
      milliseconds: 0
  - service: remote.send_command
    target:
      device_id: e25a5843dcd6df5832a249f48c90e1f9
    data:
      device: Xfinity
      command:
      - b64:JgBQAAcdBzgHGQdcBysHKwcmB1cHAAHFBx0HPAcZBxkHGQc4BxkHGQcAClEHHQc4BxkHXAcrBysHJgdXBwABxQcdBxkHPAcZBxkHOAcZBxkHAApRAAAAAAAAAAA=
  - delay: 3
  - service: remote.send_command
    target:
      device_id: e25a5843dcd6df5832a249f48c90e1f9
    data:
      device: Xfinity
      command:
      - b64:JgBQAAcdBzgHGQdcBysHKwcmB1cHAAHFBx0HUwcZBxkHGQciBxkHGQcAClEHHQc4BxkHXAcrBysHJgdXBwABxQcdBy8HPAcZBxkHIgcZBxkHAApRAAAAAAAAAAA=
  - delay: 3
  - service: remote.send_command
    target:
      device_id: e25a5843dcd6df5832a249f48c90e1f9
    data:
      device: Xfinity
      command:
      - b64:JgBQAAcdBzgHGQdcBysHKwcmB1cHAAHFBx0HUwcZBxkHGQciBxkHGQcAClEHHQc4BxkHXAcrBysHJgdXBwABxQcdBy8HPAcZBxkHIgcZBxkHAApRAAAAAAAAAAA=
  - delay: 3
  - service: remote.send_command
    target:
      device_id: e25a5843dcd6df5832a249f48c90e1f9
    data:
      device: Xfinity
      command:
      - b64:JgBQAAcdBzgHGQdcBysHKwcmB1cHAAHFBx0HSgcZBxkHGQcrBxkHGQcAClEHHQc4BxkHXAcrBysHJgdXBwABxQcdByYHPAcZBxkHKwcZBxkHAApRAAAAAAAAAAA=
  - delay: 3
  - service: remote.send_command
    target:
      device_id: e25a5843dcd6df5832a249f48c90e1f9
    data:
      device: Xfinity
      command:
      - b64:JgBQAAcdBzgHGQdcBysHKwcmB1cHAAHEBx0HTwcZBxkHGQcmBxkHGQcACk4HHQc4BxkHXAcrBysHJgdXBwABxAcdBysHPAcZBxkHJgcZBxkHAApOAAAAAAAAAAA=
  - delay: 3
  - service: remote.send_command
    target:
      device_id: e25a5843dcd6df5832a249f48c90e1f9
    data:
      device: Xfinity
      command:
      - b64:JgBQAAcdBzgHGQdcBysHKwcmB1cHAAHFBx0HRgcZBxkHGQcvBxkHGQcAClEHHQc4BxkHXAcrBysHJgdXBwABxQcdByIHPAcZBxkHLwcZBxkHAApRAAAAAAAAAAA=
  - delay: 3
  - service: remote.send_command
    target:
      device_id: e25a5843dcd6df5832a249f48c90e1f9
    data:
      device: Xfinity
      command:
      - b64:JgBQAAcdBzgHGQdcBysHKwcmB1cHAAHEBx0HXAcZBxkHGQcZBxkHGQcACk4HHQc4BxkHXAcrBysHJgdXBwABxAcdBzgHPAcZBxkHGQcZBxkHAApOAAAAAAAAAAA=
  - delay: 3
  - service: remote.send_command
    target:
      device_id: e25a5843dcd6df5832a249f48c90e1f9
    data:
      device: Xfinity
      command:
      - b64:JgBQAAcdBzgHGQdcBysHKwcmB1cHAAHFBx0HQQcZBxkHGQc0BxkHGQcAClEHHQc4BxkHXAcrBysHJgdXBwABxQcdBx0HPAcZBxkHNAcZBxkHAApRAAAAAAAAAAA=
  - delay: 3
  - service: remote.send_command
    target:
      device_id: e25a5843dcd6df5832a249f48c90e1f9
    data:
      device: Xfinity
      command:
      - b64:JgBQAAcdBzgHGQdcBysHKwcmB1cHAAHFBx0HUwcZBxkHGQciBxkHGQcAClEHHQc4BxkHXAcrBysHJgdXBwABxQcdBy8HPAcZBxkHIgcZBxkHAApRAAAAAAAAAAA=
  - delay: 3
  - service: remote.send_command
    target:
      device_id: e25a5843dcd6df5832a249f48c90e1f9
    data:
      device: Xfinity
      command:
      - b64:JgBQAAcdBzgHGQdcBysHKwcmB1cHAAHEBx0HTwcZBxkHGQcmBxkHGQcACk4HHQc4BxkHXAcrBysHJgdXBwABxAcdBysHPAcZBxkHJgcZBxkHAApOAAAAAAAAAAA=
  - delay: 3
  - service: remote.send_command
    target:
      device_id: e25a5843dcd6df5832a249f48c90e1f9
    data:
      device: Xfinity
      command:
      - b64:JgBQAAcdBzgHGQdcBysHKwcmB1cHAAHEBx0HTwcZBxkHGQcmBxkHGQcACk4HHQc4BxkHXAcrBysHJgdXBwABxAcdBysHPAcZBxkHJgcZBxkHAApOAAAAAAAAAAA=
  - delay: 3
  - service: remote.send_command
    target:
      device_id: e25a5843dcd6df5832a249f48c90e1f9
    data:
      device: Xfinity
      command:
      - b64:JgBQAAcdBzgHGQdcBysHKwcmB1cHAAHFBx0HQQcZBxkHGQc0BxkHGQcAClEHHQc4BxkHXAcrBysHJgdXBwABxQcdBx0HPAcZBxkHNAcZBxkHAApRAAAAAAAAAAA=
  - delay: 3
  - service: remote.send_command
    target:
      device_id: e25a5843dcd6df5832a249f48c90e1f9
    data:
      device: Xfinity
      command:
      - b64:JgBQAAcdBzgHGQdcBysHKwcmB1cHAAHFBx0HNAcZBxkHGQdBBxkHGQcAClEHHQc4BxkHXAcrBysHJgdXBwABxQcdB1cHPAcZBxkHQQcZBxkHAApRAAAAAAAAAAA=
  - delay: 3
  - service: remote.send_command
    target:
      device_id: e25a5843dcd6df5832a249f48c90e1f9
    data:
      device: Xfinity
      command: b64:JgBQAAcdBzgHGQdcBysHKwcmB1cHAAHFBx0HSgcZBxkHIgciBxkHGQcAClEHHQc4BxkHXAcrBysHJgdXBwABxQcdByYHPAcZByIHIgcZBxkHAApRAAAAAAAAAAA=
  - delay: 3
  - service: remote.send_command
    target:
      device_id: e25a5843dcd6df5832a249f48c90e1f9
    data:
      device: Xfinity
      command: b64:JgDEAAYdBjkIFwZdCCoFLAglBlkIAAHDCBwJOwYZBhoEJQYwBhoFGgYACk0IHAY5CRcGXQgpCSkFKAZYCQABwwgcBhoGPQYaBSQFMQYaBQAKbgccCDcGGgZdCCkGKwYoBVkGAAHFBh8GGgU+BhkJIAYxBhkGAApsCRwGOQYaBV0GLAYrBicGWQgAAcMIHQgXBj4IFwYjBjEFGgYaBAALTAgcBjoFGgZdCCkGLAYnBlgJAAHDBh4GIwYaBRoFWgZdCBcGGgUADQU=
  mode: single
downstairs_tv_power_on:
  alias: Downstairs TV Power On
  sequence:
  - service: remote.send_command
    target:
      device_id: e25a5843dcd6df5832a249f48c90e1f9
    data:
      device: Yamaha
      command: PowerOn
  - service: remote.send_command
    target:
      device_id: e25a5843dcd6df5832a249f48c90e1f9
    data:
      device: PioneerTV
      command: Power
  mode: single
downstairs_tv_power_off:
  alias: Downstairs TV Power Off
  sequence:
  - service: remote.send_command
    target:
      device_id: e25a5843dcd6df5832a249f48c90e1f9
    data:
      device: PioneerTV
      command: Power
  - service: remote.send_command
    target:
      device_id: e25a5843dcd6df5832a249f48c90e1f9
    data:
      device: Yamaha
      command: PowerOff
  mode: single
turn_off_all_lights:
  sequence:
  - service: homeassistant.turn_off
    target:
      entity_id: group.downstairs
  - service: timer.cancel
    target:
      entity_id: "{% set var = namespace(timer=\"\") %} {% for entity in state_attr('group.downstairs','entity_id')\
        \ %}\n  {% set parts = entity.split('.') %}\n  {% set var.timer = var.timer\
        \ + \"timer.\" + parts[1] + \"_off\" %}\n  {% if not loop.last %}\n    {%\
        \ set var.timer = var.timer + \", \" %}\n  {% endif %}\n{% endfor %} {{ var.timer\
        \ }}\n"
  mode: single
  alias: Turn off all downstairs lights
  icon: mdi:lightbulb
turn_off_all_upstairs_lights_except_kids:
  alias: Turn off all upstairs lights (except kids)
  sequence:
  - choose:
    - conditions:
      - condition: state
        entity_id: input_boolean.guestroom_in_use
        state: 'off'
      sequence:
      - type: turn_off
        device_id: c32cc10983532262a768e043288f286f
        entity_id: switch.guest_bedroom_lights
        domain: switch
      - service: timer.cancel
        target:
          entity_id: timer.guest_bedroom_lights_off
    default: []
  - service: homeassistant.turn_off
    target:
      entity_id: group.upstairs_master_and_halls
  - service: timer.cancel
    target:
      entity_id: "{% set var = namespace(timer=\"\") %} {% for entity in state_attr('group.upstairs_master_and_halls','entity_id')\
        \ %}\n  {% set parts = entity.split('.') %}\n  {% set var.timer = var.timer\
        \ + \"timer.\" + parts[1] + \"_off\" %}\n  {% if not loop.last %}\n    {%\
        \ set var.timer = var.timer + \", \" %}\n  {% endif %}\n{% endfor %} {{ var.timer\
        \ }}\n"
  mode: single
  icon: mdi:lightbulb
turn_off_kids_lights:
  alias: Turn off all kids lights
  sequence:
  - service: homeassistant.turn_off
    target:
      entity_id: group.upstairs_kids
  - service: timer.cancel
    target:
      entity_id: "{% set var = namespace(timer=\"\") %} {% for entity in state_attr('group.upstairs_kids','entity_id')\
        \ %}\n  {% set parts = entity.split('.') %}\n  {% set var.timer = var.timer\
        \ + \"timer.\" + parts[1] + \"_off\" %}\n  {% if not loop.last %}\n    {%\
        \ set var.timer = var.timer + \", \" %}\n  {% endif %}\n{% endfor %} {{ var.timer\
        \ }}\n"
  mode: single
  icon: mdi:lightbulb
find_matts_phone:
  alias: '[Not Working] Find Matt’s Phone'
  sequence:
  - service: notify.mobile_app_matts_iphone
    data:
      message: Home Assistant is searching for Matt’s phone
      data:
        push:
          interruption-level: time-sensitive
  mode: single
  icon: hass:phone
reset_system_on_restart:
  alias: Reset system on restart
  sequence:
  - choose:
    - conditions:
      - condition: state
        entity_id: cover.garage_door
        state: open
        for: 00:00:00
      sequence:
      - service: notify.mobile_app_matts_iphone
        data:
          message: 'Warning: The garage door is open'
    default: []
  - service: timer.start
    data:
      duration: 00:01:30
    target:
      entity_id: timer.rtl_timer
  mode: single
turn_lights_on:
  alias: 'Lights: Turn on lights, start timer, and set explanation text'
  icon: mdi:lightbulb-variant
  fields:
    lights:
      name: Lights
      description: Lights to turn on
      required: true
    duration:
      name: Timer Duration
      description: Duration of timer to turn lights off
      required: true
  max: 10
  mode: parallel
  sequence:
  - service: homeassistant.turn_on
    target:
      entity_id: '{{ lights }}'
  - service: input_text.set_value
    target:
      entity_id: '{{ lights | map(''regex_replace'', ''^.*[.]'', ''input_text.'')
        | map(''regex_replace'', ''$'', ''_why_on'') | list }}'
    data:
      value: "{% set message = \"Lights turned on manually\" %}\n{% if not (context.id\
        \ is none) %}\n  {% set message = state_attr((states.automation | selectattr(\"\
        context.id\", \"eq\", context.id) | map(attribute=\"entity_id\") | join),\
        \ \"friendly_name\") %}\n{% endif %}\n{{ message }}\n"
  - service: timer.start
    data:
      entity_id: '{{ lights | map(''regex_replace'', ''^.*[.]'', ''timer.'') | map(''regex_replace'',''$'',
        ''_off'') | list}}'
      duration: '{{duration }}'
  - service: input_text.set_value
    target:
      entity_id: '{{ lights | map(''regex_replace'', ''^.*[.]'', ''input_text.'')
        | map(''regex_replace'', ''$'', ''_why_off'') | list }}'
    data:
      value: "{% set message = duration + \" timer expired\" %}\n{% if not (context.id\
        \ is none) %}\n  {% set message = message + \" from \" + state_attr((states.automation\
        \ | selectattr(\"context.id\", \"eq\", context.id) | map(attribute=\"entity_id\"\
        ) | join), \"friendly_name\") %}\n{% endif %}\n{{ message }}\n"
turn_lights_off:
  alias: 'Lights: Turn off lights and set explanation text'
  icon: mdi:lightbulb-variant
  fields:
    lights:
      name: Lights
      description: Lights to turn on
      required: true
    source:
      name: Script Caller
      description: Caller of script to use in logging
      required: true
  max: 10
  mode: parallel
  sequence:
  - service: homeassistant.turn_off
    target:
      entity_id: '{{ lights }}'
  - service: input_text.set_value
    target:
      entity_id: '{{ lights | map(''regex_replace'', ''^.*[.]'', ''input_text.'')
        | map(''regex_replace'', ''$'', ''_why_off'') | list }}'
    data:
      value: "{% set message = \"Lights turned off manually\" %} {% if not (context.id\
        \ is none) %}\n  {% set message = state_attr((states.automation | selectattr(\"\
        context.id\", \"eq\", context.id) | map(attribute=\"entity_id\") | join),\
        \ \"friendly_name\") %}\n{% endif %} {{ message }}\n"
