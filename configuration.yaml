# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

homeassistant:
  packages:
    mqtt_sensors: !include mqtt_sensors.yaml
    unavailable_entities: !include unavailable_entities.yaml
    tesla: !include tesla.yaml
    movie_night: !include movie_night.yaml
    lwsd_calendar: !include lwsd_calendar.yaml
    dogs_fed: !include dogs_fed.yaml

frontend:
  extra_module_url:
    - /hacsfiles/lovelace-card-mod/card-mod.js

# Debugging
logger:
  default: warning
  filters:
    # Netgear: Warning given when auth cookie expires (every 30 min), re-login successful
    pynetgear:
      - "Unauthorized response, let's login and retry...$"
    # Unable to prevent an empty string from being logged, so filtering it out
    homeassistant.components.system_log.external:
      - "Unavailable entities:$"

system_log:
  fire_event: true

# Customized left navigation
panel_custom:
  - name: ha_server_con
    sidebar_title: "Server Controls"
    sidebar_icon: mdi:server
    js_url: /api/hassio/app/entrypoint.js
    url_path: "config/server_control"
    embed_iframe: true
    require_admin: true
    config:
      ingress: core_configurator
  - name: ha_integ
    sidebar_title: Integrations
    sidebar_icon: mdi:devices
    js_url: /api/hassio/app/entrypoint.js
    url_path: "config/integrations"
    embed_iframe: true
    require_admin: true
    config:
      ingress: core_configurator
  - name: ha_auto
    sidebar_title: Automations
    sidebar_icon: mdi:robot
    js_url: /api/hassio/app/entrypoint.js
    url_path: "config/automation"
    embed_iframe: true
    require_admin: true
    config:
      ingress: core_configurator
  - name: ha_addon
    sidebar_title: Add-ons
    sidebar_icon: mdi:home-assistant
    js_url: /api/hassio/app/entrypoint.js
    url_path: "hassio/dashboard"
    embed_iframe: true
    require_admin: true

# Setup input variables for all entitites
# input_text: !include input_text.yaml
timer:
  rtl_timer:
    name: RTL Status Timer
input_boolean:
  guestroom_in_use:
    name: "Guestroom In Use"
  dining_room_in_use:
    name: "Dining Room In Use"
  movie_night:
    name: "Movie Night"
  null_boolean:
    name: "Null Boolean"
  home_automation_disabled:
    name: "Home Automation Disabled"
    initial: false
  debugging:
    name: "Debugging"
    initial: false
input_datetime:
  last_riley_nail_trim:
    name: Last Date Riley's Nails Trimmed
    has_date: true
    has_time: false
  last_gracie_nail_trim:
    name: Last Date Gracie's Nails Trimmed
    has_date: true
    has_time: false

# Add support for templating in lovelace
lovelace_gen:
lovelace:
  mode: yaml
  resources:
    - url: /hacsfiles/home-assistant-sun-card/home-assistant-sun-card.js
      type: module
    - url: /hacsfiles/lovelace-auto-entities/auto-entities.js
      type: module
    - url: /hacsfiles/lovelace-card-templater/lovelace-card-templater.js
      type: module
    - url: /hacsfiles/ha-floorplan/floorplan.js
      type: module
    - url: /hacsfiles/mini-graph-card/mini-graph-card-bundle.js
      type: module
    - url: /hacsfiles/lovelace-multiple-entity-row/multiple-entity-row.js
      type: module
    - url: /hacsfiles/lovelace-template-entity-row/template-entity-row.js
      type: module
    - url: /hacsfiles/timer-bar-card/timer-bar-card.js
      type: module
    - url: /hacsfiles/lovelace-card-mod/card-mod.js
      type: module
    - url: /local/entity-attributes-card.js
      type: module

# Envisalink Alarm Panel
envisalink: !include envisalink.yaml

# Alexa integration with Philips Hue emulated bridge
# Used by several packages (e.g., tesla, movie_night)
# in addition to the ones below
emulated_hue:
  listen_port: 80
  expose_by_default: false
  entities:
    switch.family_room_lamp:
      name: "Family Room Lamp"
      hidden: false

# input text for alexa actionable notifications
input_text:
  alexa_actionable_notification:
    name: Alexa Actionable Notification Holder
    max: 255
    initial: '{"text": "This is a test of the alexa actions custom skill. Did it work?", "event": "actionable.skill.test"}'

sensor:
  # Format sensor for lovelace
  - platform: template
    sensors:
      count_in_bed:
        friendly_name: "Count in Bed"
        value_template: >
          {% set matt = 0 %}
          {% set julie = 0 %}
          {% if states('binary_sensor.matt_in_bed') == "on" %}
            {% set matt = 1 %}
          {% endif %}
          {% if states('binary_sensor.julie_in_bed') == "on" %}
            {% set julie = 1 %}
          {% endif %}
          {{ matt + julie }}
      # Dog Nail Trim Sensors
      weeks_since_riley_nail_trim:
        friendly_name: "Weeks Since Riley's Last Nail Trim"
        value_template: "{{ (((as_timestamp(now()) - state_attr('input_datetime.last_riley_nail_trim', 'timestamp')) / 86400) / 7) | round(1) }} Weeks"
      weeks_since_gracie_nail_trim:
        friendly_name: "Weeks Since Gracie's Last Nail Trim"
        value_template: "{{ (((as_timestamp(now()) - state_attr('input_datetime.last_gracie_nail_trim', 'timestamp')) / 86400) / 7) | round(1) }} Weeks"

  # Monitor system performance
  - platform: systemmonitor
    resources:
      - type: memory_use_percent
      - type: disk_use_percent
      - type: swap_use_percent
      - type: load_1m
      - type: load_5m
      - type: load_15m
      - type: processor_use

binary_sensor:
  # Add calculated bed presence
  - platform: template
    sensors:
      matt_in_bed:
        friendly_name: "Matt in Bed"
        value_template: "{{ states('sensor.matt_bed_presence') | int > 200 if is_number(states('sensor.matt_bed_presence')) else 0 }}"
      julie_in_bed:
        friendly_name: "Julie in Bed"
        value_template: "{{ states('sensor.julie_bed_presence') | int > 200 if is_number(states('sensor.julie_bed_presence')) else 0 }}"

      # Add "on"/"off" sensors for AutoMoLi
      epson_printing:
        friendly_name: "Epson Printer Printing"
        value_template: "{{ states('sensor.epson_et_3760_series') == 'printing' }}"
      garage_door_open:
        friendly_name: "Garage Door Open"
        value_template: "{{ states('cover.garage_door') == 'open' }}"
      kitchen_recently_off:
        friendly_name: "Kitchen Lights Recently Off"
        value_template: "{{ states('switch.kitchen_lights') == 'off' and (as_timestamp(now()) - as_timestamp(states.switch.kitchen_lights.last_updated)) < 60  }}"
      master_bath_recent_motion:
        friendly_name: "Master Bathroom Recent Motion"
        value_template: "{{ states('binary_sensor.master_bathroom_motion') != None and (as_timestamp(now()) - as_timestamp(states.binary_sensor.master_bathroom_motion.last_updated)) < 30 }}"
      bedroom_motion_for_bathroom_lights:
        friendly_name: "Bedroom Motion Triggers Bathroom Lights"
        value_template: "{{ states('binary_sensor.master_bedroom_motion') == 'on' and (now() > today_at('06:00') and now() < today_at('23:00')) }}"
      master_toilet_motion_with_bath_light_on:
        friendly_name: "Master Toilet Motion When Bath Light On"
        value_template: "{{ states('binary_sensor.toilet_motion') == 'on' and states('switch.bathroom_bath_light') == 'on' }}"
      upstairs_back_stairs_recent_motion:
        friendly_name: "Upstairs Back Stairs Recent Motion"
        value_template: "{{ states('binary_sensor.upstairs_back_stairs_motion') and (as_timestamp(now()) - as_timestamp(states.binary_sensor.upstairs_back_stairs_motion.last_updated)) < 30 }}"
      powder_door_closed_under_30min:
        friendly_name: "Powder Room Door Closed Under 30 Min"
        value_template: "{{ states('binary_sensor.powder_room_door') == 'off' and (as_timestamp(now()) - as_timestamp(states.binary_sensor.powder_room_door.last_updated)) < 1800 }}"
      downstairs_tv:
        friendly_name: "Downstairs TV"
        value_template: "{{ states('sensor.tv_temperature') | int >= 90 if is_number(states('sensor.tv_temperature')) else False }}"
      is_sunny:
        friendly_name: "Is Sunny"
        value_template: "{{ states('weather.national_weather_service') == 'sunny' and state_attr('sun.sun', 'elevation') > 6 }}"

  # Add trend to aqara temp and humidity sensors
  - platform: trend
    sensors:
      master_shower_temp_rising:
        entity_id: sensor.master_shower_temperature
        sample_duration: 600
        max_samples: 30
        min_gradient: 0.015
      master_shower_humidity_rising:
        entity_id: sensor.master_shower_humidity
        sample_duration: 600
        max_samples: 30
        min_gradient: 0.015

# Track people at home
template:
  - sensor:
      - unique_id: people_at_home
        name: People at Home
        state: >
          {%- set people = expand('group.people') %}
          {{ people | selectattr('state', 'in', ['home', 'on'] ) | list | count }}
        icon: >
          {%- set icons = ['account-off', 'account', 'account-multiple'] %}
          {%- set people = expand('group.people') %}
          {%- set cnt = people | selectattr('state', 'in', ['home', 'on'] ) | list | count %}
          {%- if cnt >= 0 %}
            mdi:{{ icons[cnt] if cnt in range(icons | count) else 'account-group' }}
          {%- else %}
            mdi:account-alert
          {%- endif %}
        attributes:
          template: people_tracker
          people: >
            {%- set people = expand('group.people') | selectattr('state', 'eq', 'home') | map(attribute='name') | list %}
            {%- set company = expand('group.people') | selectattr('state', 'eq', 'on') | map(attribute='name') | list %}
            {%- set people = people + company %}
            {{ people }}
          and: >
            {%- set people = expand('group.people') | selectattr('state', 'eq', 'home') | map(attribute='name') | list %}
            {%- set company = expand('group.people') | selectattr('state', 'eq', 'on') | map(attribute='name') | list %}
            {%- set people = people + company %}
            {%- if people | count > 0 %}
              {{- [people[:-1] | join(', '), 'and', people[-1]] | join(' ') if people | count > 1 else people[0] }}
            {%- else %}unknown
            {%- endif %}
          or: >
            {%- set people = expand('group.people') | selectattr('state', 'eq', 'home') | map(attribute='name') | list %}
            {%- set company = expand('group.people') | selectattr('state', 'eq', 'on') | map(attribute='name') | list %}
            {%- set people = people + company %}
            {%- if people | count > 0 %}
              {{- [people[:-1] | join(', '), 'or', people[-1]] | join(' ') if people | count > 1 else people[0] }}
            {%- else %}unknown
            {%- endif %}
          count: >
            {%- set people = expand('group.people') | selectattr('state', 'eq', 'home') | map(attribute='name') | list %}
            {%- set company = expand('group.people') | selectattr('state', 'eq', 'on') | map(attribute='name') | list %}
            {%- set people = people + company %}
            {{ people | count }}

# Shelly devices over MQTT
switch: !include shelly_mqtt.yaml

# Text to speech
tts:
  - platform: google_translate

# Includes
group: !include groups.yaml
automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml
